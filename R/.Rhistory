"#E69F00", "#4E84C4")) +
geom_hline(yintercept = 34.5, colour = "#999999", linetype = 2) +
geom_vline(xintercept = -111.5, colour = "#999999", linetype = 2) +
guides(size = guide_legend(order = 2),
fill = guide_legend(order = 1,
override.aes = list(size = 3))) +
# Map coord
coord_quickmap() +
theme_classic() +
theme(
axis.line = element_blank(),
axis.title = element_blank(),
plot.margin = unit(c(0, 0.1, 0, 0), "cm")
)
pop_plot
# Calculate pairwise dist
## in meters so divide by 1000 for km
dist_mat = geosphere::distm(cbind(pop_local_df$long, pop_local_df$lat))/1000
hist(dist_mat, xlab = "Distance (km)", main = "")
# We need to determine how many Exposed individuals
# are present at the start in each population
E_pops = vector("numeric", length = n_pop)
# We'll assume a total number of exposed across the
# full meta-community, and then randomly distribute these hosts
n_initial_E = 20
# (more exposed in larger populations)
these_E <- sample.int(n_pop,
size = n_initial_E,
replace = TRUE,
prob = pop_N)
for(i in 1:n_initial_E){
E_pops[these_E[i]] <- E_pops[these_E[i]] + 1
}
pop_local_df$E_pops = E_pops
# Set up the dates of change:
# 10 years of day identifiers:
n_years = 10
day_ID = rep(c(1:365), times = n_years)
date_seq = seq.Date(mdy("1-1-90"),
mdy("1-1-90") + length(day_ID) - 1,
by = "1 day")
# R0 peaks once every how many days?
t_mode = 365
# Sinusoidal forcing in R0:
beta_base = 0.15
beta_seq = beta_base * (1 + cos((2*pi*day_ID)/t_mode))
# Data frame for plotting:
beta_seq_df = data.frame(beta_seq, date_seq)
date_breaks = seq(date_seq[1],
date_seq[1] + years(n_years),
by = "5 years")
ggplot(beta_seq_df) +
geom_path(aes(x = date_seq, y = beta_seq)) +
scale_x_date(breaks = date_breaks, date_labels = "%Y") +
labs(x="", y=expression("Time-varying "*beta*", ("*beta[t]*")")) +
# THEME
theme_classic()+
theme(
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12, color = "black"),
axis.text.x = element_text(angle = 45, vjust = 0.5)
)
length(beta_seq)
# Set up the time_windows() function
n_days = length(date_seq)
# Time-varying beta
changing_beta = vector("list", length = n_pop)
for (this_pop in 1:n_pop) {
changing_beta[[this_pop]] <- beta_seq
}
# Migration rate
changing_m = rep(1/10.0, times = n_days)
# Migration range
changing_dist_param = rep(100, times = n_days)
# Immigration (none)
changing_imm_frac = rep(0, times = n_days)
# Create the time_window() object
tw = time_windows(
beta = changing_beta,
m = changing_m,
dist_param = changing_dist_param,
imm_frac = changing_imm_frac,
daily = date_seq
)
# Create the seir_control() object
seir_control = seir_control(
input_N_pops = pop_N,
input_E_pops = E_pops,
birth = 1/(2*365),
incubate = 1/5.0,
recov = 1/20.0
)
# How many realizations of the model?
n_realz = 30
# Need to assign a distinct seed for each realization
## Allows for reproducibility
input_realz_seeds = c(1:n_realz)
# Run the model in parallel
model_output =
model_parallel(
# Necessary inputs
input_dist_mat = dist_mat,
input_census_area = pop_local_df$census_area,
input_tw = tw,
input_realz_seeds = input_realz_seeds,
# OTHER MODEL PARAMS
trans_type = 1, # freq-dependent trans
stoch_sd = 0.75,  # stoch transmission sd,
control = seir_control    # data structure with seir-specific params
)
glimpse(model_output)
# Grab the new events variables
pops_out_df =
model_output %>%
select(pops.seed:pops.R_pop)
# Simplify/clarify colnames
colnames(pops_out_df) = c("iter","pop_ID","time",
"S", "E", "I", "R")
# Join the region
region_df = pop_local_df %>% select(pop_ID, region)
pops_out_df =
left_join(pops_out_df, region_df, by = "pop_ID")
# Join with dates (instead of "time" integer)
date_df = data.frame(
date = date_seq,
time = c(1:length(date_seq))
)
pops_out_df =
left_join(pops_out_df, date_df, by = "time")
# Aggregate outcomes by region:
## First, get the sum across regions,dates,iterations
pops_sum_df =
pops_out_df %>%
group_by(region, iter, date) %>%
summarize_all(sum)
glimpse(pops_sum_df)
#######################
# PLOT
#######################
# region labels for facets:
region_labs = paste0("Region ",
sort(unique(region_df$region)))
names(region_labs) = sort(unique(region_df$region))
# Create an element list for plotting theme:
plot_base =
list(
labs(x = "", y = "Number Infectious"),
theme_classic(),
theme(
axis.text = element_text(size = 12, color = "black"),
axis.title = element_text(size = 14, color = "black"),
axis.text.x = element_text(angle = 45, vjust = 0.5)
)
)
plot_allyears =
ggplot(pops_sum_df) +
geom_path(aes(x = date, y = I, group = iter),
color = "black", alpha = 0.25) +
facet_wrap(~region, scales = "fixed", ncol = 2,
labeller = labeller(region = region_labs)) +
plot_base
plot_allyears
plot_allyears =
ggplot(pops_sum_df) +
geom_path(aes(x = date, y = I, group = iter, color = "region"),
alpha = 0.25) +
# Colors per region:
scale_color_manual(values = c("#00AFBB", "#D16103",
"#E69F00", "#4E84C4")) +
guides(color="none") +
facet_wrap(~region, scales = "fixed", ncol = 2,
labeller = labeller(region = region_labs)) +
plot_base
plot_allyears
glimpse(pops_sum_df)
plot_allyears =
ggplot(pops_sum_df) +
geom_path(aes(x = date, y = I, group = iter, color = region),
alpha = 0.25) +
# Colors per region:
scale_color_manual(values = c("#00AFBB", "#D16103",
"#E69F00", "#4E84C4")) +
guides(color="none") +
facet_wrap(~region, scales = "fixed", ncol = 2,
labeller = labeller(region = region_labs)) +
plot_base
plot_allyears
# Set up the dates of change:
# 10 years of day identifiers:
n_years = 10
day_ID = rep(c(1:365), times = n_years)
date_seq = seq.Date(mdy("1-1-90"),
mdy("1-1-90") + length(day_ID) - 1,
by = "1 day")
# R0 peaks once every how many days?
t_mode = 365
# Sinusoidal forcing in R0:
beta_base = 0.08
beta_seq = beta_base * (1 + cos((2*pi*day_ID)/t_mode))
# Data frame for plotting:
beta_seq_df = data.frame(beta_seq, date_seq)
date_breaks = seq(date_seq[1],
date_seq[1] + years(n_years),
by = "5 years")
ggplot(beta_seq_df) +
geom_path(aes(x = date_seq, y = beta_seq)) +
scale_x_date(breaks = date_breaks, date_labels = "%Y") +
labs(x="", y=expression("Time-varying "*beta*", ("*beta[t]*")")) +
# THEME
theme_classic()+
theme(
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12, color = "black"),
axis.text.x = element_text(angle = 45, vjust = 0.5)
)
# Set up the time_windows() function
n_days = length(date_seq)
# Time-varying beta
changing_beta = vector("list", length = n_pop)
for (this_pop in 1:n_pop) {
changing_beta[[this_pop]] <- beta_seq
}
# Migration rate
changing_m = rep(1/10.0, times = n_days)
# Migration range
changing_dist_param = rep(100, times = n_days)
# Immigration (none)
changing_imm_frac = rep(0, times = n_days)
# Create the time_window() object
tw = time_windows(
beta = changing_beta,
m = changing_m,
dist_param = changing_dist_param,
imm_frac = changing_imm_frac,
daily = date_seq
)
# Create the seir_control() object
seir_control = seir_control(
input_N_pops = pop_N,
input_E_pops = E_pops,
birth = 1/(2*365),
incubate = 1/5.0,
recov = 1/20.0
)
# How many realizations of the model?
n_realz = 30
# Need to assign a distinct seed for each realization
## Allows for reproducibility
input_realz_seeds = c(1:n_realz)
# Run the model in parallel
model_output =
model_parallel(
# Necessary inputs
input_dist_mat = dist_mat,
input_census_area = pop_local_df$census_area,
input_tw = tw,
input_realz_seeds = input_realz_seeds,
# OTHER MODEL PARAMS
trans_type = 1, # freq-dependent trans
stoch_sd = 0.75,  # stoch transmission sd,
control = seir_control    # data structure with seir-specific params
)
glimpse(model_output)
# Grab the new events variables
pops_out_df =
model_output %>%
select(pops.seed:pops.R_pop)
# Simplify/clarify colnames
colnames(pops_out_df) = c("iter","pop_ID","time",
"S", "E", "I", "R")
# Join the region
region_df = pop_local_df %>% select(pop_ID, region)
pops_out_df =
left_join(pops_out_df, region_df, by = "pop_ID")
# Join with dates (instead of "time" integer)
date_df = data.frame(
date = date_seq,
time = c(1:length(date_seq))
)
pops_out_df =
left_join(pops_out_df, date_df, by = "time")
# Aggregate outcomes by region:
## First, get the sum across regions,dates,iterations
pops_sum_df =
pops_out_df %>%
group_by(region, iter, date) %>%
summarize_all(sum)
glimpse(pops_sum_df)
#######################
# PLOT
#######################
# region labels for facets:
region_labs = paste0("Region ",
sort(unique(region_df$region)))
names(region_labs) = sort(unique(region_df$region))
# Create an element list for plotting theme:
plot_base =
list(
labs(x = "", y = "Number Infectious"),
theme_classic(),
theme(
axis.text = element_text(size = 12, color = "black"),
axis.title = element_text(size = 14, color = "black"),
axis.text.x = element_text(angle = 45, vjust = 0.5)
)
)
plot_allyears =
ggplot(pops_sum_df) +
geom_path(aes(x = date, y = I, group = iter, color = region),
alpha = 0.25) +
# Colors per region:
scale_color_manual(values = c("#00AFBB", "#D16103",
"#E69F00", "#4E84C4")) +
guides(color="none") +
facet_wrap(~region, scales = "fixed", ncol = 2,
labeller = labeller(region = region_labs)) +
plot_base
plot_allyears
# Set up the dates of change:
# 10 years of day identifiers:
n_years = 10
day_ID = rep(c(1:365), times = n_years)
date_seq = seq.Date(mdy("1-1-90"),
mdy("1-1-90") + length(day_ID) - 1,
by = "1 day")
# R0 peaks once every how many days?
t_mode = 365
# Sinusoidal forcing in R0:
beta_base = 0.12
beta_seq = beta_base * (1 + cos((2*pi*day_ID)/t_mode))
# Data frame for plotting:
beta_seq_df = data.frame(beta_seq, date_seq)
date_breaks = seq(date_seq[1],
date_seq[1] + years(n_years),
by = "5 years")
ggplot(beta_seq_df) +
geom_path(aes(x = date_seq, y = beta_seq)) +
scale_x_date(breaks = date_breaks, date_labels = "%Y") +
labs(x="", y=expression("Time-varying "*beta*", ("*beta[t]*")")) +
# THEME
theme_classic()+
theme(
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12, color = "black"),
axis.text.x = element_text(angle = 45, vjust = 0.5)
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Set up the dates of change. 5 time windows
n_windows = 5
# Window intervals
start_dates = c(mdy("1-1-20"),  mdy("2-1-20"),  mdy("2-16-20"), mdy("3-11-20"),  mdy("3-22-20"))
end_dates =   c(mdy("1-31-20"), mdy("2-15-20"), mdy("3-10-20"), mdy("3-21-20"), mdy("5-1-20"))
# Date sequence
date_seq = seq.Date(start_dates[1], end_dates[n_windows], by = "1 day")
# Time-varying beta
changing_beta = c(0.3,            0.1,            0.1,            0.15,            0.15)
#beta sequence
beta_seq = NULL
beta_seq[1:(yday(end_dates[1]) - yday(start_dates[1]) + 1)] =
changing_beta[1]
for(i in 2:n_windows){
beta_temp_seq = NULL
beta_temp = NULL
if(changing_beta[i] != changing_beta[i-1]){
beta_diff = changing_beta[i-1] - changing_beta[i]
n_days = yday(end_dates[i]) - yday(start_dates[i]) + 1
beta_slope = - beta_diff / n_days
for(j in 1:n_days){
beta_temp_seq[j] = changing_beta[i-1] + beta_slope*j
}
}else{
n_days = yday(end_dates[i]) - yday(start_dates[i]) + 1
beta_temp_seq = rep(changing_beta[i], times = n_days)
}
beta_seq = c(beta_seq, beta_temp_seq)
}
beta_seq_df = data.frame(beta_seq, date_seq)
date_breaks = seq(range(date_seq)[1],
range(date_seq)[2],
by = "1 month")
ggplot(beta_seq_df) +
geom_path(aes(x = date_seq, y = beta_seq)) +
scale_x_date(breaks = date_breaks, date_labels = "%b") +
labs(x="", y=expression("Time-varying "*beta*", ("*beta[t]*")")) +
# THEME
theme_classic()+
theme(
axis.text = element_text(size = 10, color = "black"),
axis.title = element_text(size = 12, color = "black"),
axis.text.x = element_text(angle = 45, vjust = 0.5)
)
# Distance between populations:
dist_temp = seq(0, 300, length.out = 200)
dist_param = c(50, 100, 200)
p_move_func = function(dist_param, distance){
1 / (exp( distance / dist_param ))
}
p_move_mat = sapply(dist_param,
p_move_func, distance = dist_temp)
p_move_df =
data.frame(dist_ij = dist_temp, p_move_mat) %>%
pivot_longer(X1:X3, values_to = "p_ij", names_to = "dp_val") %>%
mutate(dp_val = case_when(
dp_val == "X1" ~ "50",
dp_val == "X2" ~ "100",
dp_val == "X3" ~ "200"
))
ggplot(p_move_df) +
geom_path(aes(x = dist_ij, y = p_ij,
color = dp_val, group = dp_val)) +
labs(x = "Distance between pops (km)",
y = "Probability of migration") +
scale_color_viridis_d(name = "dist_param",
breaks = c("50", "100", "200"),
direction = -1) +
theme_classic() +
theme(
axis.title = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 11),
legend.position = c(0.7,0.7)
)
# Distance between populations:
# Units hosts / km2
dens_temp = seq(0, 3000, length.out = 200)
monod_k = c(100, 500, 1000)
beta_max = 2.0
beta_dd_func = function(monod_k, dens_temp, beta_max){
beta_max * dens_temp / (monod_k + dens_temp)
}
beta_dd_mat = sapply(monod_k,
beta_dd_func, dens_temp, beta_max)
beta_dd_df =
data.frame(dens = dens_temp, beta_dd_mat) %>%
pivot_longer(X1:X3, values_to = "beta_realz", names_to = "monod_K") %>%
mutate(monod_K = case_when(
monod_K == "X1" ~ "100",
monod_K == "X2" ~ "500",
monod_K == "X3" ~ "1000"
))
ggplot(beta_dd_df) +
geom_path(aes(x = dens, y = beta_realz,
color = monod_K, group = monod_K)) +
labs(x = expression("Host density ("~km^-2~")"),
y = expression("Transmission,"~beta["realized"])) +
scale_color_viridis_d(name = "Monod_K",
breaks = c("100", "500", "1000"),
direction = -1) +
theme_classic() +
theme(
axis.title = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 11),
legend.position = c(0.7,0.3)
)
install.packages("pdflatex")
setwd("~/Documents/NAU_Research/COVID19/SPARSEMODr-live/R")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Distance between populations:
dist_temp = seq(0, 300, length.out = 200)
dist_phi = c(50, 100, 200)
p_move_func = function(dist_phi, distance){
1 / (exp( distance / dist_phi ))
}
p_move_mat = sapply(dist_phi,
p_move_func, distance = dist_temp)
p_move_df =
data.frame(dist_ij = dist_temp, p_move_mat) %>%
pivot_longer(X1:X3, values_to = "p_ij", names_to = "dp_val") %>%
mutate(dp_val = case_when(
dp_val == "X1" ~ "50",
dp_val == "X2" ~ "100",
dp_val == "X3" ~ "200"
))
library(tidyverse)
library(viridis)
library(lubridate)
# Distance between populations:
dist_temp = seq(0, 300, length.out = 200)
dist_phi = c(50, 100, 200)
p_move_func = function(dist_phi, distance){
1 / (exp( distance / dist_phi ))
}
p_move_mat = sapply(dist_phi,
p_move_func, distance = dist_temp)
p_move_df =
data.frame(dist_ij = dist_temp, p_move_mat) %>%
pivot_longer(X1:X3, values_to = "p_ij", names_to = "dp_val") %>%
mutate(dp_val = case_when(
dp_val == "X1" ~ "50",
dp_val == "X2" ~ "100",
dp_val == "X3" ~ "200"
))
ggplot(p_move_df) +
geom_path(aes(x = dist_ij, y = p_ij,
color = dp_val, group = dp_val)) +
labs(x = "Distance between pops (km)",
y = "Probability of migration") +
scale_color_viridis_d(name = expression(phi),
breaks = c("50", "100", "200"),
direction = -1) +
theme_classic() +
theme(
axis.title = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 11),
legend.position = c(0.7,0.7)
)
library(SPARSEMODr)
